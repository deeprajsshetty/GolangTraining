package main

import (
	"fmt"
	"sync"
)

/*
One thousand goroutines are spawned in a for-loop within main. Each goroutine increments countValue exactly once.
Therefore, one would expect the output of the program to be 1000.
Each time the program is run, the output is different. This is because of the conflict of multiple goroutines
attempting to modify the global changeValue at nearly the same time. There is no error message generated by the system.
But the output is incorrect.
*/

const (
	number = 1000
)

var (
	countValue int
	wg         sync.WaitGroup
)

func main() {
	wg.Add(number)
	for i := 0; i < number; i++ {
		go func() {
			countValue++
			wg.Done()
		}()
	}
	wg.Wait()
	fmt.Printf("\ncountValue = %d", countValue)
}

// Run below command and you can see Race Condition
// go run -race 006-Concurrency/003-Channel/005-RaceCondition/main.go
